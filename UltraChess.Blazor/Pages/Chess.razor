@page "/chess"
@using UltraChess.Blazor.Models

<h3>Chess</h3>

<div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" id="autopromotequeen" checked @onclick="ToggleAutoPromote"/>
    <label class="form-check-label" for="autopromotequeen">Automatically promote to a queen.</label>
</div>

<div class="@modalClass" tabindex="-1" style="display: @displayMode;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button class="close" @onclick="ToggleModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <button @onclick="() => SelectPromotionPiece(1)">Horse</button>
                <button @onclick="() => SelectPromotionPiece(2)">Queen</button>
                <button @onclick="() => SelectPromotionPiece(3)">Rook</button>
                <button @onclick="() => SelectPromotionPiece(4)">Bishop</button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="ToggleModal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="grid-container">
    @{
        foreach (var square in ChessBoard.Squares)
        {
            <div id="@($"{square.Id}")" class="grid-item fill @(square.IsHighlighted ? "highlight" : square.IsLight ? "light" : "dark")" ondragover="event.preventDefault();" @ondrop="@(()=> Drop(square.Id))">

                <div class="rank-text">@(square.Rank == 'a' ? square.File.ToString() : "")</div>
                <div class="file-text">@(square.File == '1' ? square.Rank.ToString() : "")</div>
                @{
                    if (square.PieceId != 0)
                    {
                        <img id="@($"{square.Rank}.{square.File}-image")" src="@(ChessBoard.Pieces[square.PieceId].Image)" @ondrag="@(()=> StartDrag(square.Id))" ondrop="event.preventDefault();" />
                    }
                }
            </div>
        }
    }
</div>

@code {
    string modalClass => ChessBoard.PromotionModalIsOpen ? "modal fade show" : "modal fade";
    string displayMode => ChessBoard.PromotionModalIsOpen ? "block" : "none";

    private ChessBoard ChessBoard = new ChessBoard("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
    private int FromSquareId;
    private int ToSquareId;

    void StartDrag(int fromSquareId)
    {
        FromSquareId = fromSquareId;
        var fromSquare = ChessBoard.Squares[FromSquareId];
        ChessBoard.HighlightLegalMoves(fromSquareId);
    }

    void Drop(int toSquareId)
    {
        ToSquareId = toSquareId;
        var fromSquare = ChessBoard.Squares[FromSquareId];
        ChessBoard.Move(FromSquareId, toSquareId);
    }

    void ToggleAutoPromote()
    {
        ChessBoard.AutoPromoteQueen = !ChessBoard.AutoPromoteQueen;
    }

    private void ToggleModal()
    {
        ChessBoard.PromotionModalIsOpen = !ChessBoard.PromotionModalIsOpen;
        StateHasChanged();
    }

    private void SelectPromotionPiece(int id)
    {
        var promotionPiece = ChessBoard.PromotionPiece[Convert.ToInt32(ChessBoard.IsWhiteTurn)];
        if (ChessBoard.IsWhiteTurn)
        {
            if (id == 1)
            {
                promotionPiece = 2;
            }
            if(id == 2)
            {
                promotionPiece = 5;
            }
            if (id == 3)
            {
                promotionPiece = 4;
            }
            if (id == 4)
            {
                promotionPiece = 3;
            }
        }
        else
        {
            if (id == 1)
            {
                promotionPiece = 8;
            }
            if (id == 2)
            {
                promotionPiece = 11;
            }
            if (id == 3)
            {
                promotionPiece = 9;
            }
            if (id == 4)
            {
                promotionPiece = 10;
            }
        }
        ChessBoard.PromotionModalIsOpen = false;
        ChessBoard.MovePiece(FromSquareId, ToSquareId, promotionPiece);
    }
}
