@page "/chess"
@using UltraChess.Blazor.Models

<div class="container">
    <div class="mb-1 row align-items-start">
        <label class="col-md-2 col-form-label" for="autopromotequeen">Auto promote Queen</label>
        <div class="form-check form-switch col-md-1">
            <input class="form-check-input" type="checkbox" id="autopromotequeen" checked @onclick="ToggleAutoPromote" />
        </div>
    </div>

    <div class="mb-1 row align-items-start">
        <label class="col-md-2 col-form-label" for="unmakemove">Undo</label>
        <div class="col-md-1">
            <button id="unmakemove" @onclick="UnMakeMove" class="btn btn-primary"><span class="btn-label"><span class="oi oi-action-undo" title="unmake move" aria-hidden="true"></span></span></button>
        </div>
    </div>

    <div class="mb-1 row align-items-start">
        <label class="col-md-2 col-form-label" for="fen">Import FEN string</label>
        <div class="col-md-1">
            <button @onclick="() => ChessBoard = new ChessBoard(FENString)" class="btn btn-primary"> <span class="btn-label"><span class="oi oi-reload" title="loadfen" aria-hidden="true"></span></span></button>
        </div>
        <div class="form-check form-switch col-md-7">
            <input id="fen" type="text" class="form-control" @bind="@FENString" />
        </div>
    </div>
    <div class="@modalClass" tabindex="-1" style="display: @displayMode;">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modal title</h5>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <img id="queen-promotion" class="rounded mx-auto d-block img-thumbnail" src="@(ChessBoard.CurrentBoardInfo.IsWhiteTurn ? "img/Q_W.png" : "img/Q_B.png")" @onclick="() => SelectPromotionPiece(3)" />
                    </div>
                    <div class="mb-3">
                        <img id="knight-promotion" class="rounded mx-auto d-block img-thumbnail" src="@(ChessBoard.CurrentBoardInfo.IsWhiteTurn ? "img/N_W.png" : "img/N_B.png")" @onclick="() => SelectPromotionPiece(0)" />
                    </div>
                    <div class="mb-3">
                        <img id="rook-promotion" class="rounded mx-auto d-block img-thumbnail" src="@(ChessBoard.CurrentBoardInfo.IsWhiteTurn ? "img/R_W.png" : "img/R_B.png")" @onclick="() => SelectPromotionPiece(2)" />
                    </div>
                    <div class="mb-3">
                        <img id="bishop-promotion" class="rounded mx-auto d-block img-thumbnail" src="@(ChessBoard.CurrentBoardInfo.IsWhiteTurn ? "img/B_W.png" : "img/B_B.png")" @onclick="() => SelectPromotionPiece(1)" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="grid-container">
        @{
            foreach (var square in ChessBoard.Squares)
            {
                <div id="@($"{square.Id}")" class="grid-item fill @(square.IsHighlighted ? "highlight" : square.IsLight ? "light" : "dark")" ondragover="event.preventDefault();" @ondrop="@(() => Drop(square.Id))">

                    <div class="rank-text">@(square.Rank == 'a' ? square.File.ToString() : "")</div>
                    <div class="file-text">@(square.File == '1' ? square.Rank.ToString() : "")</div>
                    @{
                        if (square.PieceId != 0)
                        {
                            <img id="@($"{square.Rank}.{square.File}-image")" src="@(ChessBoard.Pieces[square.PieceId].Image)" @ondrag="@(() => StartDrag(square.Id))" ondrop="event.preventDefault();" />
                        }
                    }
                </div>
            }
        }
    </div>

</div>

@code {
    string modalClass => PromotionModalIsOpen ? "modal fade show" : "modal fade";
    string displayMode => PromotionModalIsOpen ? "block" : "none";

    private ChessBoard ChessBoard = new ChessBoard("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
    private int FromSquareId;
    private int ToSquareId;
    private string FENString = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";

    // Promotion
    private readonly int[][] PromotionPieces = new int[2][] { new int[] { 8, 9, 10, 11 }, new int[] { 2, 3, 4, 5 } };
    private bool PromotionModalIsOpen = false;
    private bool AutoPromoteQueen = true;

    void StartDrag(int fromSquareId)
    {
        FromSquareId = fromSquareId;
        var moves = ChessBoard.LegalMoves.Where(m => m.FromSquareId == FromSquareId);
        ChessBoard.HighlightMoves(moves, true);
    }

    void Drop(int toSquareId)
    {
        ChessBoard.HighlightMoves(ChessBoard.LegalMoves, false);
        ToSquareId = toSquareId;
        var moveToMake = ChessBoard.LegalMoves.FirstOrDefault(m => m.FromSquareId == FromSquareId && m.ToSquareId == ToSquareId);
        if(moveToMake == null)
        {
            return;
        }
        else
        {
            if (moveToMake.Flag == MoveFlag.PawnPromotion)
            {
                if (AutoPromoteQueen)
                {
                    var pieceToMove = ChessBoard.Pieces[ChessBoard.Squares[moveToMake.FromSquareId].PieceId];
                    moveToMake.PromotionPieceId = PromotionPieces[Convert.ToInt32(pieceToMove.IsWhite)][3];
                    MakeMoveOnBoard(moveToMake);
                }
                else
                {
                    ShowModal();
                    StateHasChanged();
                }
            }
            else
            {
                MakeMoveOnBoard(moveToMake);
            }
        }
    }

    private void MakeMoveOnBoard(Move move)
    {
        var moveMade = ChessBoard.MakeMove(move);
        if (moveMade)
        {
            ChessBoard.LegalMoves = ChessBoard.GenerateLegalMoves(ChessBoard.CurrentBoardInfo.IsWhiteTurn);
        }

    }

    void ToggleAutoPromote()
    {
        AutoPromoteQueen = !AutoPromoteQueen;
    }

    private void ToggleModal()
    {
        PromotionModalIsOpen = !PromotionModalIsOpen;
        StateHasChanged();
    }

    void ShowModal()
    {
        PromotionModalIsOpen = true;
    }

    void UnMakeMove()
    {
        if(ChessBoard.MovesMade.Count > 0)
        {
            ChessBoard.UnMakeMove(ChessBoard.MovesMade.Peek());
            ChessBoard.LegalMoves = ChessBoard.GenerateLegalMoves(ChessBoard.CurrentBoardInfo.IsWhiteTurn);
        }
    }

    private void SelectPromotionPiece(int id)
    {
        var moveToMake = ChessBoard.LegalMoves.FirstOrDefault(m => m.FromSquareId == FromSquareId && m.ToSquareId == ToSquareId);

        var pieceToMove = ChessBoard.Pieces[ChessBoard.Squares[moveToMake.FromSquareId].PieceId];
        moveToMake.PromotionPieceId = PromotionPieces[Convert.ToInt32(pieceToMove.IsWhite)][id];
        PromotionModalIsOpen = false;
        MakeMoveOnBoard(moveToMake);
    }
}
