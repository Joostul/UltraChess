@page "/chess"
@using UltraChess.Blazor.Models

<h3>Chess</h3>

<div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" id="autopromotequeen" checked @onclick="ToggleAutoPromote" />
    <label class="form-check-label" for="autopromotequeen">Automatically promote to a queen.</label>
</div>

<div class="@modalClass" tabindex="-1" style="display: @displayMode;">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <img id="queen-promotion" class="rounded mx-auto d-block img-thumbnail" src="@(ChessBoard.IsWhiteTurn ? "img/Q_W.png" : "img/Q_B.png")" @onclick="() => SelectPromotionPiece(3)" />
                </div>
                <div class="mb-3">
                    <img id="knight-promotion" class="rounded mx-auto d-block img-thumbnail" src="@(ChessBoard.IsWhiteTurn ? "img/N_W.png" : "img/N_B.png")" @onclick="() => SelectPromotionPiece(0)" />
                </div>
                <div class="mb-3">
                    <img id="rook-promotion" class="rounded mx-auto d-block img-thumbnail" src="@(ChessBoard.IsWhiteTurn ? "img/R_W.png" : "img/R_B.png")" @onclick="() => SelectPromotionPiece(2)" />
                </div>
                <div class="mb-3">
                    <img id="bishop-promotion" class="rounded mx-auto d-block img-thumbnail" src="@(ChessBoard.IsWhiteTurn ? "img/B_W.png" : "img/B_B.png")" @onclick="() => SelectPromotionPiece(1)" />
                </div>
            </div>
        </div>
    </div>
</div>

<div class="grid-container">
    @{
        foreach (var square in ChessBoard.Squares)
        {
            <div id="@($"{square.Id}")" class="grid-item fill @(square.IsHighlighted ? "highlight" : square.IsLight ? "light" : "dark")" ondragover="event.preventDefault();" @ondrop="@(() => Drop(square.Id))">

                <div class="rank-text">@(square.Rank == 'a' ? square.File.ToString() : "")</div>
                <div class="file-text">@(square.File == '1' ? square.Rank.ToString() : "")</div>
                @{
                    if (square.PieceId != 0)
                    {
                        <img id="@($"{square.Rank}.{square.File}-image")" src="@(ChessBoard.Pieces[square.PieceId].Image)" @ondrag="@(() => StartDrag(square.Id))" ondrop="event.preventDefault();" />
                    }
                }
            </div>
        }
    }
</div>

@code {
    string modalClass => ChessBoard.PromotionModalIsOpen ? "modal fade show" : "modal fade";
    string displayMode => ChessBoard.PromotionModalIsOpen ? "block" : "none";

    private ChessBoard ChessBoard = new ChessBoard("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
    private readonly int[][] PromotionPieces = new int[2][] { new int[] { 8, 9, 10, 11 }, new int[] { 2, 3, 4, 5 } };
    private int FromSquareId;
    private int ToSquareId;

    void StartDrag(int fromSquareId)
    {
        FromSquareId = fromSquareId;
        var moves = ChessBoard.LegalMoves.Where(m => m.FromSquareId == FromSquareId);
        ChessBoard.HighlightMoves(moves);
    }

    void Drop(int toSquareId)
    {
        ToSquareId = toSquareId;
        var fromSquare = ChessBoard.Squares[FromSquareId];
        ChessBoard.Move(FromSquareId, toSquareId);
        ChessBoard.LegalMoves = ChessBoard.GenerateLegalMoves(ChessBoard.IsWhiteTurn);
    }

    void ToggleAutoPromote()
    {
        ChessBoard.AutoPromoteQueen = !ChessBoard.AutoPromoteQueen;
    }

    private void ToggleModal()
    {
        ChessBoard.PromotionModalIsOpen = !ChessBoard.PromotionModalIsOpen;
        StateHasChanged();
    }

    void ShowModal()
    {
        ChessBoard.PromotionModalIsOpen = true;
    }

    private void SelectPromotionPiece(int id)
    {
        var promotionPieceIndex = Convert.ToInt32(ChessBoard.IsWhiteTurn);
        ChessBoard.PromotionModalIsOpen = false;
        ChessBoard.MovePiece(new Move(FromSquareId, ToSquareId), PromotionPieces[promotionPieceIndex][id]);
    }
}
