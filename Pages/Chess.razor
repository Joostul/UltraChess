@page "/chess"
@using UltraChess.Blazor.Models

<h3>Chess</h3>

<div class="grid-container">
    @{
        foreach (var square in ChessBoard.squares)
        {
            <div id="@($"{square.Id}")" class="grid-item fill @(square.IsHighlighted ? "highlight" : square.IsLight ? "light" : "dark")" ondragover="event.preventDefault();" @ondrop="@(()=> Drop(square.Id))" >

                <div class="rank-text">@(square.File == 'a' ? square.Rank.ToString() : "")</div>
                <div class="file-text">@(square.Rank == '1' ? square.File.ToString() : "")</div>
                @{
                    if (square.Piece != null)
                    {
                        <img id="@($"{square.File}.{square.Rank}-image")" src="@(square.Piece.Image)" @ondrag="@(()=> StartDrag(square.Id))" ondrop="event.preventDefault();" />
                    }
                }
            </div>
        }
    }
</div>


@code {
    private ChessBoard ChessBoard = new ChessBoard("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
    private int FromSquareId;
    private List<int> LegalSquaresToMoveTo;

    void StartDrag(int fromSquareId)
    {
        FromSquareId = fromSquareId;
        if(ChessBoard.squares[fromSquareId].Piece is Pawn pawn)
        {
            LegalSquaresToMoveTo = pawn.GetSquaresToMoveTo(ChessBoard.squares[fromSquareId].Id);
            foreach (var legalSquareToMoveTo in LegalSquaresToMoveTo)
            {
                ChessBoard.squares[legalSquareToMoveTo].IsHighlighted = true;
            }
            StateHasChanged();
        }
    }

    void Drop(int toSquareId)
    {
        foreach (var square in LegalSquaresToMoveTo)
        {
            ChessBoard.squares[square].IsHighlighted = false;
            StateHasChanged();
        }
        if (FromSquareId == toSquareId)
        {
            StateHasChanged();
            return;
        }
        if (LegalSquaresToMoveTo.Contains(toSquareId))
        {
            ChessBoard.squares[toSquareId].Piece = ChessBoard.squares[FromSquareId].Piece;
            ChessBoard.squares[FromSquareId].Piece = null;
            StateHasChanged();
        }
    }
}
